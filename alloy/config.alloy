///////////////////////////////////////////////////////////////////////////////
// Configuration file
local.file "endpoints" {
    filename = "/etc/alloy/endpoints.json"
}

///////////////////////////////////////////////////////////////////////////////
// Metrics, Logging, and Tracing from .NET Application

// This section is for scraping the incoming data from .NET services.
prometheus.scrape "dotnet_services" {
    targets = [
        {"__address__" = "alloy:4317", group = "services", service = "nvrweb"},
    ]
    scrape_interval = "15s"
    forward_to = [prometheus.remote_write.mimir.receiver]
    job_name = "nvrweb_services"
}

///////////////////////////////////////////////////////////////////////////////
// Logging from .NET Application

otelcol.receiver.otlp "otlp_receiver" {
    grpc {
        endpoint = "0.0.0.0:4317"
    }
    http {
        endpoint = "0.0.0.0:4318"
    }
    output {
        logs = [otelcol.processor.batch.default.input]
        traces = [otelcol.processor.batch.default.input]
        metrics = [otelcol.processor.batch.default.input]
    }
}

otelcol.processor.batch "default" {
    send_batch_size = 16384
    send_batch_max_size = 16384
    timeout = "2s"
    output {
        traces = [otelcol.exporter.otlp.tempo.input]
        logs = [otelcol.exporter.loki.default.input]
        // metrics = [prometheus.remote_write.mimir.receiver]
    }
}

// OpenTelemetry Traces Exporter (to Tempo)
otelcol.exporter.otlp "tempo" {
    client {
        endpoint = json_path(local.file.endpoints.content, ".traces.url")[0]
        tls {
            insecure = true
            insecure_skip_verify = true
        }
    }
}

// OpenTelemetry Logs Exporter (to Loki)
otelcol.exporter.loki "default" {
    forward_to = [loki.write.autologging.receiver]
}

loki.write "autologging" {
    endpoint {
        url = json_path(local.file.endpoints.content, ".logs.url")[0]
        basic_auth {
            username = json_path(local.file.endpoints.content, ".logs.basicAuth.username")[0]
            password = json_path(local.file.endpoints.content, ".logs.basicAuth.password")[0]
        }
    }
}

// Metrics Exporter to Mimir
prometheus.remote_write "mimir" {
    endpoint {
        url = json_path(local.file.endpoints.content, ".metrics.url")[0]
        basic_auth {
            username = json_path(local.file.endpoints.content, ".metrics.basicAuth.username")[0]
            password = json_path(local.file.endpoints.content, ".metrics.basicAuth.password")[0]
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// OpenTelemetry Processors

otelcol.processor.tail_sampling "errors" {
    decision_wait = "30s"
    policy {
        name = "sample-erroring-traces"
        type = "status_code"
        status_code {
            status_codes = ["ERROR"]
        }
    }
    output {
        traces = [otelcol.processor.batch.default.input]
    }
}

otelcol.connector.spanmetrics "tracemetrics" {
    namespace = "traces.spanmetrics"
    dimension {
        name = "http.method"
    }
    dimension {
        name = "http.target"
    }
    dimension {
        name = "http.status_code"
    }
    histogram {
        explicit {}
    }
    exemplars {
        enabled = true
    }
    output {
        metrics = [otelcol.exporter.prometheus.tracemetrics.input]
    }
}

otelcol.exporter.prometheus "tracemetrics" {
    forward_to = [prometheus.remote_write.mimir.receiver]
}

